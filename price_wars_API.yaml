swagger: '2.0'
info:
  title: Price Wars API
  description: API for Price Wars Master Project
  version: 1.0.3
host: api.mp_pricewars.com
schemes:
  - http
securityDefinitions:
  Token:
    type: apiKey
    name: Authorization
    in: header
basePath: /api
produces:
  - application/json
paths:
  /config:
    get:
      tags:
        - marketplace
      summary: Get current settings
      parameters:
        - name: body
          description: current settings
          in: body
          required: true
          schema:
            $ref: '#/definitions/MarketplaceSetting'
      responses:
        '200':
          description: The settings were updated
          schema:
            $ref: '#/definitions/MarketplaceSetting'
    put:
      tags:
        - marketplace
      summary: Update settings
      parameters:
        - name: body
          description: updated settings
          in: body
          required: true
          schema:
            $ref: '#/definitions/MarketplaceSetting'
      responses:
        '200':
          description: The settings were updated
          schema:
            $ref: '#/definitions/MarketplaceSetting'
  /offers:
    get:
      tags:
        - marketplace
      summary: All offers for products on the marketplace
      parameters:
        - name: product_id
          in: query
          description: filter for products
          type: integer
          format: int64
        - name: include_empty_offer
          in: query
          description: includes own offers where amount = 0 when token is sent in header
          type: boolean
      responses:
        '200':
          description: An array of offers
          schema:
            type: array
            items:
              $ref: '#/definitions/OfferResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, add a new offer'
      parameters:
        - name: body
          description: offer object to be added
          in: body
          required: false
          schema:
            $ref: '#/definitions/OfferRequest'
      responses:
        '201':
          description: The created offer including the ID
          schema:
            $ref: '#/definitions/OfferResponse'
        '422':
          description: Invalid input
          schema:
            $ref: '#/definitions/Error'
        '451':
          description: Invalid signature
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/offers/{id}':
    parameters:
      - name: id
        description: offer id for the offer to fetch
        in: path
        required: true
        type: integer
    get:
      tags:
        - marketplace
      summary: returns a specific offer for a product on the marketplace
      responses:
        '200':
          description: All details about the requested offer
          schema:
            $ref: '#/definitions/OfferResponse'
        '410':
          description: Offer no longer available (out of stock)
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, update an offer'
      parameters:
        - name: body
          description: Object attributes to be updated
          in: body
          required: false
          schema:
            $ref: '#/definitions/OfferUpdateRequest'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: The updated offer
          schema:
            $ref: '#/definitions/OfferResponse'
        '422':
          description: Invalid input
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, delete your offer'
      description: 'as a merchant, delete your offer'
      responses:
        '204':
          description: Deleted
        '422':
          description: Invalid input
          schema:
            $ref: '#/definitions/Error'
  '/offers/{id}/buy':
    post:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a customer, I buy products'
      parameters:
        - name: id
          description: offer id
          in: path
          required: true
          type: integer
        - name: body
          description: Object attributes to be updated
          in: body
          required: true
          schema:
            $ref: '#/definitions/BuyRequest'
      consumes:
        - application/json
      responses:
        '204':
          description: item successfully bought
        '404':
          description: item not found
        '409':
          description: offer changed (new version)
        '410':
          description: out of stock
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/offers/{id}/restock':
    patch:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, add a specified amount from your stock'
      parameters:
        - name: id
          description: offer id
          in: path
          required: true
          type: integer
        - name: body
          description: Amount to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/RestockRequest'
      consumes:
        - application/json
      responses:
        '204':
          description: offer sucessfully restocked
        '404':
          description: offer not found
        '417':
          description: >-
            offer could not be updated, because the resulting amount is invalid
            (e.g. 10 items are left in stock and you requested to remove 15. The
            remaining amount must be positive)
        '451':
          description: Invalid signature
        default:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /consumers:
    get:
      tags:
        - marketplace
      summary: All consumers currently registered with the marketplace
      responses:
        '200':
          description: An array of registered consumers
          schema:
            type: array
            items:
              $ref: '#/definitions/ConsumerRegisterResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a consumer, register as a consumer at the marketplace'
      parameters:
        - name: body
          description: api-endpoint url
          in: body
          required: false
          schema:
            $ref: '#/definitions/ConsumerRegister'
      responses:
        '201':
          description: the merchant ID
          schema:
            $ref: '#/definitions/ConsumerRegisterResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /producer/key:
    put:
      tags:
        - marketplace
      summary: >-
        as a user, I initialize the marketplace to update the current pubkey
        from the producer
      parameters: []
      responses:
        '200':
          description: PubKey refetched successfully
          schema:
            $ref: '#/definitions/PublicKeyUpdated'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /merchants:
    get:
      tags:
        - marketplace
      summary: All merchants currently registered with the marketplace
      responses:
        '200':
          description: An array of registered merchants
          schema:
            type: array
            items:
              $ref: '#/definitions/MerchantResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, register as a merchant at the marketplace'
      parameters:
        - name: body
          description: api-endpoint url
          in: body
          required: false
          schema:
            $ref: '#/definitions/MerchantRequest'
      responses:
        '201':
          description: the merchant ID
          schema:
            $ref: '#/definitions/MerchantRegisterResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/merchants/{id}':
    parameters:
      - name: id
        description: the id the merchant is registered with at the marketplace
        in: path
        required: true
        type: integer
        format: int64
    get:
      tags:
        - marketplace
      summary: 'returns a specifi, registered merchant'
      responses:
        '200':
          description: a registered merchant
          schema:
            $ref: '#/definitions/MerchantResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      security:
        - Token: []
      tags:
        - marketplace
      summary: 'as a merchant, I want to de-register myself from the marketplace'
      responses:
        '204':
          description: Deleted
  '/merchants/token/{token}':
    parameters:
      - name: token
        description: the token of a merchant
        in: path
        required: true
        type: string
    put:
      tags:
        - marketplace
      summary: update the merchant settings
      parameters:
        - name: body
          description: api-endpoint url
          in: body
          required: false
          schema:
            $ref: '#/definitions/MerchantRequest'
      responses:
        '201':
          description: the merchant ID
          schema:
            $ref: '#/definitions/MerchantRegisterResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - marketplace
      summary: remove merchant and token form the game (also remove offers)
      responses:
        '200':
          description: merchant and token deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /sold:
    post:
      tags:
        - merchant
      summary: 'as marketplace, I want to tell the merchant when his product got sold'
      parameters:
        - name: body
          description: specifications of the sold product
          in: body
          required: false
          schema:
            $ref: '#/definitions/SoldOffer'
      responses:
        '200':
          description: message delivered
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /settings:
    get:
      tags:
        - merchant
      summary: returns the default settings for the service/logic
      responses:
        '200':
          description: >-
            returns a setting json object with fields defined by the service.
            The Management UI can then generate a form
          schema:
            type: object
    put:
      tags:
        - merchant
      summary: updates the settings
      responses:
        '200':
          description: ok
  /settings/execution:
    post:
      tags:
        - merchant
      summary: alter the execution of the service logic (start/stop)
      parameters:
        - name: body
          description: specifications of the sold product
          in: body
          required: true
          schema:
            type: object
            properties:
              nextState:
                type: string
                example: start
            required:
              - nextState
      responses:
        '200':
          description: ok
  /behavior:
    get:
      tags:
        - consumer
      summary: All implemented behaviors of consumer
      responses:
        '200':
          description: An array of behaviors
          schema:
            type: array
            items:
              $ref: '#/definitions/Behavior'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /register:
    post:
      tags:
        - consumer
      summary: as a consumer I want to register the consumer to the marketplace
      parameters:
        - name: body
          description: defines body of post
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConsumerRegister'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: behavior updated
        '405':
          description: Invalid input
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /status:
    get:
      tags:
        - consumer
      summary: returns current execution status of consumer
      responses:
        '200':
          description: A status object of the consumer
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /setting:
    post:
      tags:
        - consumer
      summary: as a marketplace I want to set and execute the consumer
      parameters:
        - name: body
          description: defines body of post
          in: body
          required: true
          schema:
            $ref: '#/definitions/Setting'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: behavior updated
        '405':
          description: Invalid input
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - consumer
      summary: as a marketplace I want to disable the consumer
      description: 'as a marketplace, delete the consumer'
      responses:
        '200':
          description: OK
  /settings/products:
      post:
        tags:
          - consumer
        summary: enforces the consumer to refetch product details from producer if products are updated or added
        responses:
          '200':
            description: ok
  /products:
    get:
      tags:
        - producer
      summary: all products available from this producer 
      parameters:
        - name: showDeleted
          in: query
          description: if set to true, deleted products are shown as well (ie products that are no longer sold)
          type: boolean
      responses:
        '200':
          description: an array of products (without an amount)
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - producer
      summary: Update products with the given array (all of them!)
      parameters:
        - name: products
          description: updated products
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      responses:
        '200':
          description: success
        '406':
          description: products have to be in the form of an array
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - producer
      summary: Add products
      parameters:
        - name: products
          description: >-
            Products to add (does not have to be in the form of an array, can
            also be a single product-json). The products don't have to provide a
            UID - the UID will be auto-generated from the product-id and the
            quality. Each product also has to provide a name and price!
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      responses:
        '200':
          description: success
        '406':
          description: >-
            a product with this UID (ie the provided product_id and quality)
            already exists
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/products/{product_uid}':
    get:
      tags:
        - producer
      summary: a specific product of the producer
      parameters:
        - name: product_uid
          description: product_uid
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: an array with one specific product + information
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '404':
          description: this product_uid does not exist for this producer
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - producer
      summary: Update a specific product
      parameters:
        - name: product_uid
          description: product_uid
          in: path
          required: true
          type: integer
        - name: products
          description: >-
            updated product (without UID - the UID is auto-generated if
            necessary)
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      responses:
        '200':
          description: success
        '404':
          description: >-
            product with this UID does not exist OR a product with this UID (ie
            the provided product_id and quality) already exists - returned if
            the changes of the product lead to a change in UID that would create
            a double UID
        '406':
          description: product has to be in the form of an array
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - producer
      summary: Delete a specific product
      parameters:
        - name: product_uid
          description: product_uid
          in: path
          required: true
          type: integer
      responses:
        '200':
          description: success
        '404':
          description: product with this UID does not exist
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /buy:
    get:
      tags:
        - producer
      summary: 'as a merchant, I want to buy a random product from the producer'
      security:
        - Token: []
      responses:
        '200':
          description: >-
            a random product of amount 1 and with a signature for the
            marketplace to validate this product when the merchant wants to sell
            it
          schema:
            $ref: '#/definitions/Product'
        '400':
          description: no merchant_token provided
        '410':
          description: no items left in stock for this merchant
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /decryption_key:
    get:
      tags:
        - producer
      summary: >-
        As marketplace, I want to know the decryption_key used by the producer
        to encrypt products sold to the merchant so I can check whether a
        merchant is allowed to sell a specific product
      responses:
        '200':
          description: the public key
          schema:
            $ref: '#/definitions/PublicKey'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Status:
    type: object
    properties:
      status:
        type: string
        example: dead
        description: the consumer does not buy products
  OfferRequest:
    type: object
    properties:
      uid:
        type: integer
        format: int64
        example: 11
        description: the uid (unique id for product_id and quality) of this offer
      product_id:
        type: integer
        format: int64
        example: 2
        description: the product this offer is about
      quality:
        type: integer
        format: int64
        example: 11
        description: the quality of the product offered
      amount:
        type: integer
        format: int32
        example: 5
        description: >-
          the amount of products offered for this price  (must be smaller or
          equal to the one amount recieved from the producer)
      price:
        type: number
        format: float
        example: 123.45
        description: price of one product (item/piece)
      shipping_time:
        type: object
        description: time until consumer receives the products
        properties:
          standard:
            type: integer
            format: int32
            example: 10
            description: standard shipping
          prime:
            type: integer
            format: int32
            example: 3
            description: shipping with prime
        required:
          - standard
      prime:
        type: boolean
        example: true
        description: 'is true, if offer is available on prime'
      signature:
        type: string
        example: zJlT3PjI+ocmRKln9PjR1jkEfWkLN7ShJT0NxGPTnjM=
        description: the unchanged signature recieved from the producer
    required:
      - uid
      - product_id
      - quality
      - amount
      - price
      - shipping_time
      - signature
  OfferUpdateRequest:
    type: object
    properties:
      uid:
        type: integer
        format: int64
        example: 11
        description: the uid (unique id for product_id and quality) of this offer
      product_id:
        type: integer
        format: int64
        example: 2
        description: the product this offer is about
      quality:
        type: integer
        format: int64
        example: 11
        description: the quality of the product offered
      price:
        type: number
        format: float
        example: 123.45
        description: price of one product (item/piece)
      shipping_time:
        type: object
        description: time until consumer receives the products
        properties:
          standard:
            type: integer
            format: int32
            example: 10
            description: standard shipping
          prime:
            type: integer
            format: int32
            example: 3
            description: shipping with prime
        required:
          - standard
      prime:
        type: boolean
        example: true
        description: 'is true, if offer is available on prime'
    required:
      - uid
      - product_id
      - quality
      - price
      - shipping_time
  OfferResponse:
    type: object
    properties:
      offer_id:
        type: integer
        format: int64
        example: 1
        description: unique identifier for an offer
        readOnly: true
      uid:
        type: integer
        format: int64
        example: 11
        description: the uid (unique id for product_id and quality) of this offer
      product_id:
        type: integer
        format: int64
        example: 2
        description: the product this offer is about
      quality:
        type: integer
        format: int64
        example: 11
        description: the quality of the product offered
      merchant_id:
        type: string
        example: 1
        description: the merchant selling the product for this price
      amount:
        type: integer
        format: int32
        example: 5
        description: >-
          the amount of products offered for this price (must be smaller or
          equal to the one amount recieved from the producer)
      price:
        type: number
        format: float
        example: 123.45
        description: price of one product (item/piece)
      shipping_time:
        type: object
        description: time until consumer receives the products
        properties:
          standard:
            type: integer
            format: int32
            example: 10
            description: standard shipping
          prime:
            type: integer
            format: int32
            example: 5
            description: shipping with prime
        required:
          - standard
      prime:
        type: boolean
        example: true
        description: 'is true, if offer is available on prime'
    required:
      - offer_id
      - uid
      - product_id
      - quality
      - merchant_id
      - amount
      - price
      - shipping_time
  RestockRequest:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        example: -5
        description: specifies the amount to add to the stock. This value must be positive.
      signature:
        type: string
        example: zJlT3PjI+ocmRKln9PjR1jkEfWkLN7ShJT0NxGPTnjM=
        description: the unchanged signature recieved from the producer
    required:
      - amount
      - signature
  MerchantRequest:
    type: object
    properties:
      api_endpoint_url:
        type: string
        example: 'http://pricewar-merchant-vm:8000/'
        description: the url to the merchant's api
      merchant_name:
        type: string
        example: PriceWar Winners
        description: the name of the merchant
      algorithm_name:
        type: string
        example: CheapestPrice
        description: the name of the algorithm this merchant uses
    required:
      - api_endpoint_url
      - merchant_name
      - algorithm_name
  MerchantResponse:
    type: object
    properties:
      api_endpoint_url:
        type: string
        example: 'http://pricewar-merchant-vm:8000/'
        description: the url to the merchant's api
      merchant_name:
        type: string
        example: PriceWar Winners
        description: the name of the merchant
      algorithm_name:
        type: string
        example: CheapestPrice
        description: the name of the algorithm this merchant uses
      merchant_id:
        type: string
        example: MsganJKAZO/GALJFFPSUG
        description: unique identifier for a merchant
        readOnly: true
    required:
      - api_endpoint_url
      - merchant_name
      - merchant_id
      - algorithm_name
  MerchantRegisterResponse:
    type: object
    allOf:
      - $ref: '#/definitions/MerchantResponse'
      - properties:
          merchant_token:
            type: string
            example: MsganJKAZO/GALJFFPSUG
            description: token that needs to be provided for every API request
            readOnly: true
        required:
          - merchant_token
  ConsumerRegister:
    type: object
    properties:
      api_endpoint_url:
        type: string
        example: 'http://pricewar-consumer-vm:8000/'
        description: the url to the consumer's api
      consumer_name:
        type: string
        example: PriceWar Consumer
        description: the name of the consumer
      description:
        type: string
        example: CheapestPrice
        description: the name of the algorithm this consumer uses
    required:
      - api_endpoint_url
      - consumer_name
      - description
  ConsumerRegisterResponse:
    type: object
    properties:
      api_endpoint_url:
        type: string
        example: 'http://pricewar-consumer-vm:8000/'
        description: the url to the consumer's api
      consumer_name:
        type: string
        example: PriceWar Consumer
        description: the name of the consumer
      description:
        type: string
        example: CheapestPrice
        description: the name of the algorithm this consumer uses
      consumer_id:
        type: integer
        format: int64
        example: 3
        description: unique identifier for a consumer
        readOnly: true
    required:
      - api_endpoint_url
      - consumer_name
      - description
      - consumer_id
  BuyRequest:
    type: object
    properties:
      price:
        type: number
        example: 123.45
        description: specifies the price for the product (to check for changes)
      amount:
        type: integer
        format: int32
        example: 5
        description: specifies the amount of products to buy
      prime:
        type: boolean
        description: specifies whether the customer bought the product with prime
    required:
      - price
      - amount
      - prime
  SoldOffer:
    type: object
    properties:
      offer_id:
        type: integer
        format: int64
        example: 1
        description: the offer ID of the sold offer in the marketplace
        readOnly: true
      uid:
        type: integer
        format: int64
        example: 11
        description: the uid (unique id for product_id and quality) of this offer
      product_id:
        type: integer
        format: int64
        example: 2
        description: the product this offer is about
      quality:
        type: integer
        format: int64
        example: 11
        description: the quality of the product offered
      merchant_id:
        type: string
        example: 1
        description: the merchant selling the product for this price
      amount:
        type: integer
        format: int32
        example: 5
        description: >-
          the amount of products offered for this price (must be smaller or
          equal to the one amount recieved from the producer)
      price:
        type: number
        format: float
        example: 123.45
        description: price of one product (item/piece)
      amount_sold:
        type: integer
        format: int32
        description: how often was the offer sold
      price_sold:
        type: integer
        format: int32
        description: >-
          the price sent by the customer (might be higher [but not lower] than
          the current price)
      consumer_id:
        type: string
        description: the ID of the consumer who bought the offer
      prime:
        type: boolean
        description: specifies whether the customer bought the product with prime
    required:
      - offer_id
      - uid
      - product_id
      - quality
      - merchant_id
      - amount
      - price
      - price_sold
      - amount_sold
  PublicKeyUpdated:
    type: object
    properties:
      old producer key:
        type: string
        description: the old producer key prior to the update
        example: ''
      new producer key:
        type: string
        description: the old producer key prior to the update
        example: voTo/RyIggxrm8/AGCM1HQ==
    required:
      - old producer key
      - new producer key
  Behavior:
    type: object
    properties:
      name:
        type: string
        description: the name of the behavior
      description:
        type: string
        description: describing the logic of this behavior
      setting:
        type: object
        description: depending on exact implementation of each behavior logic
  MarketplaceSetting:
    type: object
    properties:
      consumer_per_minute:
        type: number
        format: float
        description: amount of consumer coming in per minute
      max_updates_per_sale:
        type: number
        format: float
        description: how often a merchant can update the price between sales
      max_req_per_sec:
        type: number
        format: float
        description: definies the amount of maximum requests per second
  Setting:
    type: object
    properties:
      min_buying_amount:
        type: number
        description: minimal amount of items which should be bought by the consumer
      max_buying_amount:
        type: number
        description: maximal amount of items which should be bought by the consumer
      min_wait:
        type: string
        description: minimal waiting time in between buying requests towards the marketplace
      max_wait:
        type: integer
        description: maximal waiting time in between buying requests towards the marketplace
      timeout_if_no_offers_available:
        type: integer
        description: timeout time if no offers are available in the marketplace
      consumer_per_minute:
        type: integer
        description: defines the amount of consumers buying reqests per minute (60 seconds)
      timeout_if_too_many_requests:
        type: integer
        description: defines the timeout time if too many requests were done by the consumer and rejected by the marketplace
      amount_of_consumers:
        type: integer
        description: defines the amount of parrallel consumers executing their logic at the same time
      probability_of_buy:
        type: integer
        description: defines probability of a purchase for each buying iteration
      max_buying_price:
        type: integer
        description: defines a maximal price for all products to limited consumers buying behavior globally
      debug:
        type: boolean
        description: if true, advanced logging is enabled
      producer_url:
        type: string
        description: defines api endpoint url for producer; is set via ENV but can be overwritten here
      marketplace_url:
        type: string
        description: defines api endpoint url of marketplace; is set via ENV but can be overwritten here
      product_popularity:
        type: object
        description: key value hash for each available product to define there popularity if needed. By default their popularity is evenly distributed
      behaviors:
        type: array
        description: defines the behaviors with their probability of occurrence
        items:
          $ref: '#/definitions/Behavior'
  Product:
    type: object
    properties:
      uid:
        type: integer
        format: int64
        description: >-
          A unique identifier for this product. Multiple products with the same
          UID all have the same product_id AND the same quality.
        example: 11
      product_id:
        type: integer
        format: int64
        description: >-
          the product ID used to identify the product category (products with
          the same product ID have the same attributes BUT not necessarily the
          same quality)
        example: 1
      name:
        type: string
        description: the name of the product
        example: CD Christmas Music
      price:
        type: number
        description: the price of the item
        example: 15.4
      quality:
        type: integer
        format: int64
        description: >-
          The quality of the product. The better the quality the higher the
          number and the higher the price.
        example: 2
      amount:
        type: integer
        description: the amount of this product (only specified when product is bought)
        example: 5
      signature:
        type: string
        description: >-
          The encrypted hsignature ash of the product (this is used by the
          marketplace to validate that a merchant is allowed to sell this
          product). When decrypted reads as "{uid} {amount} {time in ms when
          product was sent to merchant}".
        example: M6V4l4Zsvo8J6z/MYm0vdhD9O2ucuqabDibdIlSLgZs=
      time_to_live:
        type: integer
        format: int64
        description: duration until products are not good for sale anymore
        example: -1
      stock:
        type: integer
        format: int64
        description: how many products are available (perishable goods)
        example: 5
      start_of_lifetime:
        type: integer
        format: int64
        description: start of lifetime of perishable product
        example: -1
      left_in_stock:
        type: integer
        format: int64
        description: items left in stock for a particular merchant (only shown if the product is limited, ie stock > 0)
        example: -1
      deleted:
        type: boolean
        description: whether the item is deleted, ie not available for purchase
    required:
      - uid
      - product_id
      - name
      - price
      - quality
  PublicKey:
    type: object
    properties:
      decryption_key:
        type: string
        description: >-
          the decryption_key used to encrypt the products sold to the merchant
          (encoded in Base64)
        example: S2gmXo+STy5btUZW51nBVQ==
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        example: 406
        readOnly: true
        description: currently equivalent to the HTTP status code
      message:
        type: string
        example: Not Acceptable
        readOnly: true
        description: a more detailled message about the error
      fields:
        type: string
        readOnly: true
        example: Constraints violated for property <name>.
        description: 'Additional information, optional'
    required:
      - message
